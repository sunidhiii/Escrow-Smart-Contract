// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

//import "./IERC20.sol";


contract Escrow {

    //Defining all members.
    address public stateGov;
    address payable public centralGov;
    //address payable public buyer2;
    //address public seller2;
    
    //IERC20 token = IERC20(0xC728Ee7CbA68dded18C9791F92633d52A28EaF7d);
    
    //Amount in Escrow
    uint256 public escrow = 0 ;
    uint256 public centralIssuePrice;
    
    bool public isComplete = false;  // if true, delivery of goods is complete.
    bool public isAmountDeposited = false; // if true, state govt. has deposited the amount to be paid.
    
    //For calculating balances of all the members.
    //mapping(address => uint256) balanceOf;
    

    //Triggering events.
    event OrderPlaced(address indexed _stateGov,uint256 _amount);
    
    //event AmountDeposited(address indexed _to,uint256 _amount);
    
    event DeliveryCompleted(address indexed _centralGov,uint256 _amount);
    
   // event ComplainRegistered(address indexed _by,uint256 _amount);
    
    
    //For allowing only buyers to place orders.
    modifier onlyStateGov() {
        require(msg.sender == stateGov , "Only State Gov can call this method");
        _;
    }
    
    modifier onlyCentralGov() {
        require(msg.sender == centralGov , "Only Central Gov can call this method");
        _;
    }
    
    //Initializing all variables.
    constructor(address _stateGov, address payable _centralGov, uint256 _centralIssuePrice) public {
        stateGov=_stateGov;
        centralGov= _centralGov;
        centralIssuePrice = _centralIssuePrice;
    }
    
    
    //Function to order items.
    function placeOrder() onlyStateGov external payable {
        require(msg.sender.balance >= msg.value, "Balance of buyer is less than the price of order placed");
        require(msg.value == centralIssuePrice , "Amount deposited is less than the Central issued price");
        escrow += msg.value;
        //balanceOf[msg.sender] -= _amount;
        isAmountDeposited = true;
        emit OrderPlaced(stateGov , msg.value);
    }
    
    
    //Function to declare that delivery is completed,once the item is received.
    function completeDelivery() onlyStateGov external {
        //require(escrow >=_amount, "Escrow doesn't has the amount to be delivered");
        //balanceOf[_centralGov] += _amount;
        //escrow -= _amount;
        
        require(isAmountDeposited, "No amount has been deposited");
        isComplete = true;
        emit DeliveryCompleted(centralGov, escrow);
    }
    
    function collectFunds() onlyCentralGov public payable{
        require(escrow >= centralIssuePrice, 'Cannot release funds before full amount is sent');
        require(isComplete, "Delivery of goods is not complete");
        //token.transfer(centralGov, escrow);
        centralGov.transfer(escrow);
        //balanceOf[centralGov]+=centralIssuePrice;
        escrow-=centralIssuePrice;
  }
  
    //Function to complain if the order is not received by the buyer.
    //function Complain(uint _amount) onlyStateGov external {
    //    escrow -= _amount;
    //    balanceOf[msg.sender] += _amount;
    //    emit ComplainRegistered(msg.sender,_amount);
    //}
    
    //Function to get balance of the given address.
    function getBalance() public view returns (uint256) {
        return msg.sender.balance;
    }
}
